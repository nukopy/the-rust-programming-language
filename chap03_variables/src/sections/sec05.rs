pub fn main(is_do: bool) {
    if !is_do {
        return;
    }

    println!("===== chap05 =====");
    if_expression::main();
    loop_::main();
    while_for::main();
    practice::fizzbuzz();
    println!();
}

// if Âºè
mod if_expression {
    pub fn main() {
        println!("--- if expression ---");

        let num = 6;

        if num < 5 {
            println!("condition was true");
        } else {
            println!("condition was false");
        }

        // Rust „Åß„ÅØ truthy / falsy „ÅÆÊ¶ÇÂøµ„Åå„Å™„ÅÑ„ÄÇ‰∏ãË®ò„ÅÆ„Ç≥„Éº„Éâ„ÅØ„Ç≥„É≥„Éë„Ç§„É´„Ç®„É©„Éº„Å´„Å™„Çã„ÄÇ
        /*
        if num {
            println!("number was truthy")
        }
        */

        // let ÊñáÂÜÖ„Åß if Âºè„Çí‰Ωø„ÅÜ
        let condition = true;
        let num = if condition { 5 } else { 6 };
        println!("num: {}", num);
        let num = if !condition { 5 } else { 6 };
        println!("num: {}", num);
    }
}

mod loop_ {
    pub fn main() {
        println!("--- loop ---");

        // test_infinite_loop();
        test_break_continue();
    }

    fn test_infinite_loop() {
        loop {
            println!("again!");
        }
    }

    fn test_break_continue() {
        let mut count = 0;
        'counting_up: loop {
            println!("[outer loop] count = {}", count);
            let mut remaining = 10;

            loop {
                println!("[inner loop] remaining = {}", remaining);
                if remaining == 8 {
                    println!("üèÉüèª‚Äç‚ôÇÔ∏èEscape from inner loop!");
                    break;
                }

                if count == 2 {
                    println!("üèÉüèª‚Äç‚ôÇÔ∏èEscape from outer loop!");
                    break 'counting_up;
                }

                remaining -= 1;
            }

            count += 1;
        }
    }
}

mod while_for {
    pub fn main() {
        println!("--- while ---");
        test_while();
        test_for();
    }

    fn test_while() {
        let mut number = 1;

        while number <= 3 {
            println!("{}!", number);

            number += 1;
        }

        println!("„ÉÄ„Éº");

        // while „ÇíÁî®„ÅÑ„Å¶ÈÖçÂàó„ÅÆË¶ÅÁ¥†„ÇíÂàóÊåô„Åô„Çã
        let a = [10, 20, 30, 40, 50];
        let mut idx = 0;

        // while idx < 6 { // „Å°„Å™„Åø„Å´„Åì„Çå„ÅØ runtime „Ç®„É©„Éº„Å´„Å™„Çã
        while idx < a.len() {
            println!("a[{}] = {}", idx, a[idx]);
            idx += 1;
        }
        /* „Ç≥„É°„É≥„Éà
        „Åó„Åã„Åó„ÄÅ„Åì„ÅÆ„Ç¢„Éó„É≠„Éº„ÉÅ„ÅØÈñìÈÅï„ÅÑ„ÅåÁô∫Áîü„Åó„ÇÑ„Åô„ÅÑ„Åß„Åô;
        Ê∑ª„ÅàÂ≠ó„ÅÆÈï∑„Åï„ÅåÈñìÈÅï„Å£„Å¶„ÅÑ„Çå„Å∞„ÄÅ„Éó„É≠„Ç∞„É©„É†„ÅØ„Éë„Éã„ÉÉ„ÇØ„Åó„Å¶„Åó„Åæ„ÅÑ„Åæ„Åô„ÄÇ
        „Åæ„ÅüÈÅÖ„ÅÑ„Åß„Åô„ÄÇ„Ç≥„É≥„Éë„Ç§„É©„ÅåÂÆüË°åÊôÇ„Å´„É´„Éº„Éó„ÅÆÂêÑÂõû„Åî„Å®„Å´Â¢ÉÁïåÂÄ§„ÉÅ„Çß„ÉÉ„ÇØ„ÇíË°å„ÅÜ„Çà„ÅÜ„Å™„Ç≥„Éº„Éâ„ÇíËøΩÂä†„Åô„Çã„Åã„Çâ„Åß„Åô„ÄÇ
         */
    }

    fn test_for() {
        let a = [10, 20, 30, 40, 50];

        for element in a {
            println!("element: {}", element);
        }

        let range = 0..10;
        println!("for loop with range");
        for num in range {
            println!("{}!", num);
        }
        println!("for loop with range.rev()");
        let range = 0..10; // „Ç∑„É£„Éâ„Éº„Ç§„É≥„Ç∞„ÅßÂÆ£Ë®Ä„ÅóÁõ¥„Åï„Å™„ÅÑ„Å®ÂÄüÁî®‰∫ë„ÄÖ„Åß„Ç≥„É≥„Éë„Ç§„É´„Ç®„É©„Éº
        for num in range.rev() {
            // reverse
            println!("{}!", num);
        }

        println!("for loop with range (minus to plus)");
        let range = -5..5;
        for num in range {
            // reverse
            println!("{}!", num);
        }
    }
}

mod practice {
    pub fn fizzbuzz() {
        let rng = 1..101;
        for num in rng {
            println!("{}", get_fizzbuzz_str(num));
        }
    }

    pub fn get_fizzbuzz_str(n: u32) -> String {
        // ÂêÑ„Éñ„É≠„ÉÉ„ÇØ„ÅÆÊàª„ÇäÂÄ§„ÇíÂºè„ÅßË®òËø∞„Åó„Å¶„Åø„Åü
        if n % 15 == 0 {
            "FizzBuzz".to_string()
        } else if n % 3 == 0 {
            "Fizz".to_string()
        } else if n % 5 == 0 {
            "Buzz".to_string()
        } else {
            n.to_string()
        }
    }
}

#[cfg(test)]
mod tests {
    mod practice {
        use crate::sections::sec05::practice;

        #[test]
        fn test_get_fizzbuzz_str() {
            let parameters: [(u32, String); 4] = [
                (3, "Fizz".to_string()),
                (5, "Buzz".to_string()),
                (15, "FizzBuzz".to_string()),
                (11, "11".to_string()),
            ];

            for (n, expected) in parameters {
                let actual = practice::get_fizzbuzz_str(n);
                assert_eq!(expected, actual);
            }
        }
    }
}
